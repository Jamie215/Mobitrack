function [features] = extractFeature(segments)
% features = [pitch_features, roll_features];
% angle_features = [statistical_features, frequency_features];

for i = 1:length(segments)
    % Pitch Statistical Features
    pitch_features_statistical = [...
        mean(segments.pitch), ...
        std(segments.pitch), ...
        skewness(segments.pitch), ...
        kurtosis(segments.pitch), ...
        max(segments.pitch), ...
        min(segments.pitch), ...
        max(segments.pitch) - min(segments.pitch), ...
        segments.t(end) - segments.t(1), ...
        prctile(segments.pitch, 25), ...
        prctile(segments.pitch, 50), ...
        prctile(segments.pitch, 75) ];
    
    % Frequency
    L = length(segments.pitch);
    Y = abs(fft(segments.pitch)/L);
    Y = Y(1:L/2+1);

    pitch_features_frequency = [...
        mean(Y), ...
        sum(Y.^2), ...
        entropy(Y) ];
    
    % Roll Features
    % Stastical
    roll_features = [...
        mean(segments.roll), ...
        std(segments.roll), ...
        skewness(segments.roll), ...
        kurtosis(segments.roll), ...
        max(segments.roll), ...
        min(segments.roll), ...
        max(segments.roll) - min(segments.roll), ...
        segments.t(end) - segments.t(1), ...
        prctile(segments.roll, 25), ...
        prctile(segments.roll, 50), ...
        prctile(segments.roll, 75) ];
    
    % Frequency
    L = length(segments.roll);
    Y = abs(fft(segments.roll)/L);
    Y = Y(1:L/2+1);

    roll_features = [roll_features, ...
        mean(Y), ...
        sum(Y.^2), ...
        entropy(Y) ];
    
end

%% statistical features
features = [mean(segments);
            std(segments);
            skewness(segments); % symmetry
            kurtosis(segments); % measure of heavy or light tail; high kurtosis = heavy tail = outliers
            max(segments);
            min(segments);
            max(segments)-min(segments);
            time(end)-time(1);
            prctile(segments, 25);
            prctile(segments, 50);
            prctile(segments, 75)];
%% frequency features
% http://sclab.yonsei.ac.kr/courses/10TPR/10TPR.files/Gesture%20Recognition%20with%20a%203-D%20Accelerometer.pdf
Fs = 1/mean(diff(time));
L = length(segments);
Y = fft(segments);
Y = abs(Y/L);
Y = Y(1:L/2+1);
f = Fs*(0:(L/2))/L;
figure, plot(f,Y), title('Fourier Magnitude')

features = [features;
            mean(Y);
            sum(Y.^2); % energy of spectrum
            entropy(Y)];

end

